pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ramasamy361/Full-stack-Blogging-App.git'
            }
        }
        
        stage('compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
               withSonarQubeEnv('sonar-server') {
            sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName-Blogging-app -Dsonar.projectKey=Blogging-app \
                  -Dsonar.java.binaries=target '''
                } 
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
        
        stage('Public Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                  sh "mvn deploy"
                }
            }
        }
        
        stage('Docker Build & Tag') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    
                sh "docker build -t ram1844/bloggingapp:latest ."
            }
            }
        }
        
    }
    
        stage('trivy image Scan') {
            steps {
                sh "trivy image --format table -o image.html ram1844/bloggingapp:latest"
            }
        } 
        
         stage('docker push Image') {
               steps {
                   script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        
                    sh "docker push ram1844/bloggingapp:latest"
                }
                }
            }
        }
        
        stage('K8-Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://C83E020C826B54CECCD49F15641418BE.gr7.us-east-1.eks.amazonaws.com') {
                  sh 'kubectl apply -f deployment-service.yml'
                  sleep 20
               } 
            }
        }
        
        stage('verify the Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://C83E020C826B54CECCD49F15641418BE.gr7.us-east-1.eks.amazonaws.com') {
                  sh 'kubectl get pods'
                  sh 'kubectl get svc'
                  
               } 
            }
        }
    }

}
